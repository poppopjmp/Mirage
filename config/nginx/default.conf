# Mirage API Gateway Configuration

# Define variables for service discovery
env MIRAGE_ENV;

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=20r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Cache configuration
proxy_cache_path /var/cache/nginx/mirage levels=1:2 keys_zone=mirage_cache:10m max_size=1g inactive=60m;
proxy_temp_path /var/cache/nginx/temp;

# Upstream definitions - microservices
upstream auth_service {
    server auth-service:8000;
    keepalive 32;
}

upstream user_management {
    server user-management:8000;
    keepalive 32;
}

upstream module_registry {
    server module-registry:8000;
    keepalive 32;
}

upstream scan_orchestration {
    server scan-orchestration:8000;
    keepalive 32;
}

upstream scanner_coordinator {
    server scanner-coordinator:8005;
    keepalive 32;
}

upstream data_collection {
    server data-collection:8000;
    keepalive 32;
}

upstream data_storage {
    server data-storage:8000;
    keepalive 32;
}

upstream correlation_engine {
    server correlation-engine:8000;
    keepalive 32;
}

upstream visualization {
    server visualization:8000;
    keepalive 32;
}

upstream reporting {
    server reporting:8000;
    keepalive 32;
}

upstream notification {
    server notification:8000;
    keepalive 32;
}

upstream configuration_service {
    server configuration-service:8006;
    keepalive 32;
}

upstream discovery_service {
    server discovery-service:8007;
    keepalive 32;
}

upstream integration_service {
    server integration-service:8008;
    keepalive 32;
}

# Map to determine if request should be cached
map $request_uri $cache_bypass {
    default 0;
    # Don't cache POST, PUT, DELETE requests
    ~*^(POST|PUT|DELETE) 1;
    # Don't cache auth endpoints
    ~*/auth/* 1;
    # Don't cache user data
    ~*/users/me 1;
}

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:;" always;
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # Access log configuration
    access_log /var/log/nginx/mirage-access.log combined buffer=64k flush=5s;
    error_log /var/log/nginx/mirage-error.log;
    
    # Request size limits
    client_max_body_size 10M;
    
    # Timeouts
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 75s;
    send_timeout 60s;
    
    # Enable gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types application/json text/plain text/css application/javascript;
    
    # Global CORS settings
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-API-Key, X-Request-ID' always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-API-Key, X-Request-ID';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }

    # Root path - Redirect to dashboard
    location = / {
        return 301 /dashboard/;
    }
    
    # Gateway health check endpoint
    location /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","version":"1.0.0"}';
    }
    
    # Service health checks
    location /gateway/status {
        access_log off;
        proxy_pass http://localhost:8081/status;
        proxy_set_header Host $host;
    }
    
    # Common proxy settings function
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Request-ID $request_id;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_intercept_errors on;
    proxy_cache_bypass $cache_bypass;
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;
    error_page 500 502 503 504 /api/error;
    
    # API Routes
    
    # Auth Service
    location /api/v1/auth/ {
        limit_req zone=auth_limit burst=30 nodelay;
        proxy_pass http://auth_service/api/v1/auth/;
        proxy_cache_bypass 1; # Never cache auth
    }
    
    # User Management Service
    location /api/v1/users/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://user_management/api/v1/users/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Module Registry Service
    location /api/v1/modules/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://module_registry/api/v1/modules/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
        
        # Increase timeout for module uploads
        proxy_read_timeout 300s;
        client_max_body_size 50M;
    }
    
    # Scan Orchestration Service
    location /api/v1/scans/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://scan_orchestration/api/v1/scans/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Scanner Coordinator Service
    location /api/v1/scanner/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://scanner_coordinator/api/v1/scanner/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Data Collection Service
    location /api/v1/collection/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://data_collection/api/v1/collection/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Data Storage Service
    location /api/v1/data/ {
        limit_req zone=api_limit burst=30 nodelay;
        proxy_pass http://data_storage/api/v1/data/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Correlation Engine Service
    location /api/v1/correlation/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://correlation_engine/api/v1/correlation/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
        
        # Longer timeout for correlation operations
        proxy_read_timeout 180s;
    }
    
    # Visualization Service
    location /api/v1/visualizations/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://visualization/api/v1/visualizations/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Reporting Service
    location /api/v1/reports/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://reporting/api/v1/reports/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
        
        # Longer timeout for report generation
        proxy_read_timeout 300s;
    }
    
    # Notification Service
    location /api/v1/notifications/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://notification/api/v1/notifications/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Configuration Service
    location /api/v1/config/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://configuration_service/api/v1/config/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
        
        # Cache configuration responses
        proxy_cache mirage_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_methods GET HEAD;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Discovery Service
    location /api/v1/discovery/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://discovery_service/api/v1/discovery/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Integration Service
    location /api/v1/integrations/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://integration_service/api/v1/integrations/;
        # Authentication required
        auth_request /auth/validate;
        # Pass auth headers
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_role $upstream_http_x_user_role;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_role;
    }
    
    # Authentication validator (subrequest)
    location = /auth/validate {
        internal;
        proxy_pass http://auth_service/api/v1/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }
    
    # API Error handling endpoint
    location = /api/error {
        internal;
        default_type application/json;
        return 500 '{"status":"error","message":"Service temporarily unavailable","code":"internal_server_error"}';
    }
    
    # Frontend static assets and SPA routes
    location /dashboard/ {
        # In production, this would point to the built frontend
        # For now, just return a simple page
        add_header Content-Type text/html;
        return 200 '<!DOCTYPE html>
            <html>
            <head>
                <title>Mirage OSINT Platform</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        height: 100vh;
                        margin: 0;
                        background-color: #f5f5f5;
                    }
                    .container {
                        text-align: center;
                        padding: 20px;
                        background-color: white;
                        border-radius: 8px;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        max-width: 800px;
                    }
                    h1 { color: #4285F4; }
                    .services {
                        display: flex;
                        flex-wrap: wrap;
                        justify-content: center;
                        gap: 10px;
                        margin-top: 20px;
                    }
                    .service {
                        border: 1px solid #ddd;
                        padding: 10px;
                        border-radius: 4px;
                        min-width: 150px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Mirage OSINT Platform</h1>
                    <p>Welcome to the Mirage OSINT Platform.</p>
                    <div class="services">
                        <div class="service">Auth Service</div>
                        <div class="service">User Management</div>
                        <div class="service">Module Registry</div>
                        <div class="service">Scan Orchestration</div>
                        <div class="service">Scanner Coordinator</div>
                        <div class="service">Data Collection</div>
                        <div class="service">Data Storage</div>
                        <div class="service">Correlation Engine</div>
                        <div class="service">Visualization</div>
                        <div class="service">Reporting</div>
                        <div class="service">Notification</div>
                        <div class="service">Configuration</div>
                    </div>
                </div>
            </body>
            </html>';
    }
}

# Server block for service monitoring (internal)
server {
    listen 8081;
    server_name localhost;
    
    # Turn off access logs for monitoring
    access_log off;
    
    # Status endpoint
    location /status {
        default_type application/json;
        return 200 '{"status":"healthy","services": {"auth": "up", "user_management": "up", "module_registry": "up", "scan_orchestration": "up", "scanner_coordinator": "up", "data_collection": "up", "data_storage": "up", "correlation_engine": "up", "visualization": "up", "reporting": "up", "notification": "up", "configuration": "up"}}';
    }
    
    # Service health check endpoints
    location = /health/auth {
        proxy_pass http://auth_service/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/user_management {
        proxy_pass http://user_management/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/module_registry {
        proxy_pass http://module_registry/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/scan_orchestration {
        proxy_pass http://scan_orchestration/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/scanner_coordinator {
        proxy_pass http://scanner_coordinator/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/data_collection {
        proxy_pass http://data_collection/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/data_storage {
        proxy_pass http://data_storage/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/correlation_engine {
        proxy_pass http://correlation_engine/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/visualization {
        proxy_pass http://visualization/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/reporting {
        proxy_pass http://reporting/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/notification {
        proxy_pass http://notification/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/configuration {
        proxy_pass http://configuration_service/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/discovery {
        proxy_pass http://discovery_service/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
    
    location = /health/integration {
        proxy_pass http://integration_service/api/v1/health;
        proxy_set_header Host $host;
        proxy_read_timeout 5s;
    }
}
