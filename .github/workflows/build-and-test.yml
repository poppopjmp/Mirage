name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-rust:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service-dir: 
          - services/api-gateway
          - services/auth-service
          - services/user-management-service
          - services/scan-orchestration-service
          - services/module-registry-service
          - services/data-collection-service
          - services/data-storage-service
          - services/correlation-engine-service
          - services/visualization-service
          - services/reporting-service
          - services/notification-service
          - libs/mirage-common
          - libs/mirage-middleware

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check if directory exists
        id: check_dir
        run: |
          if [ -d "${{ matrix.service-dir }}" ]; then
            echo "directory_exists=true" >> $GITHUB_OUTPUT
          else
            echo "directory_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check formatting
        if: steps.check_dir.outputs.directory_exists == 'true'
        working-directory: ${{ matrix.service-dir }}
        run: cargo fmt -- --check
      
      - name: Check with clippy
        if: steps.check_dir.outputs.directory_exists == 'true'
        working-directory: ${{ matrix.service-dir }}
        run: cargo clippy -- -D warnings
      
      - name: Build
        if: steps.check_dir.outputs.directory_exists == 'true'
        working-directory: ${{ matrix.service-dir }}
        run: cargo build
      
      - name: Test
        if: steps.check_dir.outputs.directory_exists == 'true'
        working-directory: ${{ matrix.service-dir }}
        run: cargo test

  check-typescript:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/web-ui
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/web-ui/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Test
        run: npm test

  check-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/integration-service
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install flake8 pytest
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Test with pytest
        run: |
          if [ -d "tests" ]; then pytest; fi
