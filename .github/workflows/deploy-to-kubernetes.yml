name: Deploy to Kubernetes

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
      - 'releases/*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    needs: [build-and-push-images]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set environment based on ref
        id: env
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Kubernetes tooling
        uses: azure/setup-kubectl@v3
        
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Deploy to Kubernetes with Helm
        run: |
          NAMESPACE="mirage-${{ steps.env.outputs.environment }}"
          
          # Create namespace if it doesn't exist
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE
          
          # Update Helm dependencies
          helm dependency update ./helm/mirage
          
          # Deploy with Helm
          helm upgrade --install mirage ./helm/mirage \
            --namespace $NAMESPACE \
            --set global.imageTag=${{ steps.env.outputs.tag }} \
            --set global.environment=${{ steps.env.outputs.environment }} \
            --wait --timeout 10m
      
      - name: Run post-deployment tests
        if: ${{ steps.env.outputs.environment != 'production' }}
        run: |
          # Wait for services to be ready
          kubectl -n mirage-${{ steps.env.outputs.environment }} rollout status deployment/api-gateway
          
          # Run basic health check
          API_URL=$(kubectl -n mirage-${{ steps.env.outputs.environment }} get svc api-gateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$API_URL:8080/api/v1/health || exit 1
          
          echo "Post-deployment tests passed!"
